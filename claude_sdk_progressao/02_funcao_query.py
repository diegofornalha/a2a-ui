#!/usr/bin/env python3
"""
ETAPA 2: FUN√á√ÉO query()
Foco principal do SDK - intera√ß√£o ass√≠ncrona com Claude
"""

import anyio
from claude_code_sdk import query, AssistantMessage, TextBlock

print("=" * 60)
print("üöÄ ETAPA 2: FUN√á√ÉO query() - CORA√á√ÉO DO SDK")
print("=" * 60)

# ==========================================
# 1. Query B√°sica
# ==========================================
async def exemplo_basico():
    """Exemplo mais simples poss√≠vel"""
    print("\n1Ô∏è‚É£ Query B√°sica - Exemplo M√≠nimo")
    print("-" * 40)
    print("Pergunta: What is 2 + 2?")
    print("Resposta:")
    
    async for message in query(prompt="What is 2 + 2?"):
        print(f"   Tipo de mensagem: {type(message).__name__}")
        if isinstance(message, AssistantMessage):
            for block in message.content:
                if isinstance(block, TextBlock):
                    print(f"   ü§ñ {block.text}")

# ==========================================
# 2. Query com Processamento Detalhado
# ==========================================
async def exemplo_detalhado():
    """Mostra todos os detalhes da resposta"""
    print("\n2Ô∏è‚É£ Query com Processamento Detalhado")
    print("-" * 40)
    print("Pergunta: Explique Python em uma frase")
    print("\nProcessando resposta...")
    
    async for message in query(prompt="Explique Python em uma frase"):
        # Mostra o tipo de cada mensagem recebida
        print(f"\nüì® Mensagem recebida: {type(message).__name__}")
        
        if isinstance(message, AssistantMessage):
            print("   ‚úÖ √â uma AssistantMessage!")
            
            # Verifica se content √© string ou lista
            if isinstance(message.content, str):
                print(f"   üìù Conte√∫do (string): {message.content}")
            elif isinstance(message.content, list):
                print(f"   üì¶ Conte√∫do (lista com {len(message.content)} blocos):")
                for i, block in enumerate(message.content, 1):
                    if isinstance(block, TextBlock):
                        print(f"      Bloco {i}: {block.text}")

# ==========================================
# 3. Query com M√∫ltiplas Perguntas
# ==========================================
async def exemplo_multiplas_perguntas():
    """Fazendo v√°rias perguntas em sequ√™ncia"""
    print("\n3Ô∏è‚É£ M√∫ltiplas Queries em Sequ√™ncia")
    print("-" * 40)
    
    perguntas = [
        "O que √© uma vari√°vel em Python?",
        "Como criar uma fun√ß√£o?",
        "O que s√£o listas?"
    ]
    
    for pergunta in perguntas:
        print(f"\n‚ùì Pergunta: {pergunta}")
        print("üí¨ Resposta:", end=" ")
        
        async for message in query(prompt=pergunta):
            if isinstance(message, AssistantMessage):
                # Pega apenas o primeiro bloco para manter conciso
                if isinstance(message.content, list) and len(message.content) > 0:
                    first_block = message.content[0]
                    if isinstance(first_block, TextBlock):
                        # Limita a resposta para ficar mais leg√≠vel
                        texto = first_block.text[:100]
                        if len(first_block.text) > 100:
                            texto += "..."
                        print(texto)
                        break
                elif isinstance(message.content, str):
                    texto = message.content[:100]
                    if len(message.content) > 100:
                        texto += "..."
                    print(texto)
                    break

# ==========================================
# 4. Query com Tratamento de Erros
# ==========================================
async def exemplo_com_tratamento():
    """Mostra como tratar erros e exce√ß√µes"""
    print("\n4Ô∏è‚É£ Query com Tratamento de Erros")
    print("-" * 40)
    
    try:
        print("Fazendo query...")
        message_count = 0
        
        async for message in query(prompt="Conte at√© 3 em Python"):
            message_count += 1
            
            if isinstance(message, AssistantMessage):
                print(f"‚úÖ Resposta recebida (mensagem #{message_count})")
                
                # Processa apenas TextBlocks
                text_blocks = []
                if isinstance(message.content, list):
                    for block in message.content:
                        if isinstance(block, TextBlock):
                            text_blocks.append(block.text)
                
                if text_blocks:
                    print("üìù Conte√∫do dos TextBlocks:")
                    for texto in text_blocks[:3]:  # Limita a 3 blocos
                        print(f"   ‚Ä¢ {texto[:50]}...")
    
    except Exception as e:
        print(f"‚ùå Erro: {e}")

# ==========================================
# 5. Query com Coleta de Todas as Respostas
# ==========================================
async def exemplo_coleta_completa():
    """Coleta todas as respostas antes de processar"""
    print("\n5Ô∏è‚É£ Coletando Resposta Completa")
    print("-" * 40)
    
    print("Pergunta: Liste 3 benef√≠cios de Python")
    
    # Coleta todas as mensagens
    todas_mensagens = []
    async for message in query(prompt="Liste 3 benef√≠cios de Python"):
        todas_mensagens.append(message)
    
    # Processa ap√≥s coletar tudo
    print(f"\nüìä Total de mensagens recebidas: {len(todas_mensagens)}")
    
    for i, msg in enumerate(todas_mensagens, 1):
        print(f"\nMensagem {i}: {type(msg).__name__}")
        
        if isinstance(msg, AssistantMessage):
            print("   Conte√∫do do assistente:")
            if isinstance(msg.content, str):
                print(f"   {msg.content[:100]}...")
            elif isinstance(msg.content, list):
                for block in msg.content[:3]:  # Primeiros 3 blocos
                    if isinstance(block, TextBlock):
                        print(f"   ‚Ä¢ {block.text[:50]}...")

# ==========================================
# 6. Padr√£o de Uso Recomendado
# ==========================================
async def padrao_recomendado():
    """Padr√£o mais comum e recomendado de uso"""
    print("\n6Ô∏è‚É£ Padr√£o de Uso Recomendado")
    print("-" * 40)
    
    prompt = "Como criar uma lista em Python? Seja breve."
    print(f"Prompt: {prompt}")
    print("\nResposta do Claude:")
    
    # Padr√£o simples e eficaz
    async for message in query(prompt=prompt):
        if isinstance(message, AssistantMessage):
            # Processa content independente do tipo
            if isinstance(message.content, str):
                print(f"   {message.content}")
            elif isinstance(message.content, list):
                for block in message.content:
                    if isinstance(block, TextBlock):
                        print(f"   {block.text}")

# ==========================================
# FUN√á√ÉO PRINCIPAL
# ==========================================
async def main():
    """Executa todos os exemplos"""
    
    print("\n" + "üîÑ" * 30)
    print("EXECUTANDO EXEMPLOS ASS√çNCRONOS")
    print("üîÑ" * 30)
    
    try:
        # Executa cada exemplo
        await exemplo_basico()
        await exemplo_detalhado()
        await exemplo_multiplas_perguntas()
        await exemplo_com_tratamento()
        await exemplo_coleta_completa()
        await padrao_recomendado()
        
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o: {e}")
        print("üí° Dica: Verifique se o Claude Code est√° configurado corretamente")

# ==========================================
# RESUMO
# ==========================================
print("\n" + "=" * 60)
print("üìã RESUMO DA ETAPA 2 - query()")
print("=" * 60)
print("""
‚úÖ O que aprendemos:
   ‚Ä¢ query() √© uma fun√ß√£o ass√≠ncrona (usar com async/await)
   ‚Ä¢ Retorna um AsyncIterator de mensagens
   ‚Ä¢ Principal tipo de retorno: AssistantMessage
   ‚Ä¢ content pode ser string ou lista de TextBlocks

üìù Padr√£o b√°sico:
   async for message in query(prompt="sua pergunta"):
       if isinstance(message, AssistantMessage):
           # processar resposta

üîë Pontos importantes:
   ‚Ä¢ SEMPRE verificar tipo com isinstance()
   ‚Ä¢ content pode ser string OU lista
   ‚Ä¢ TextBlock tem propriedade .text
   ‚Ä¢ Use anyio.run(main()) para executar

üéØ Pr√≥ximo passo:
   ‚Ä¢ Etapa 3 - ClaudeCodeOptions para personalizar comportamento
""")
print("=" * 60)

# Execu√ß√£o
if __name__ == "__main__":
    print("\nüöÄ Iniciando execu√ß√£o ass√≠ncrona...")
    print("   (Isso far√° chamadas reais √† API do Claude)")
    print("-" * 40)
    
    try:
        anyio.run(main)
    except ImportError:
        print("‚ùå anyio n√£o est√° instalado")
        print("üí° Instale com: pip install anyio")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Execu√ß√£o interrompida pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro: {e}")