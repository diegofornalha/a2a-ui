#!/usr/bin/env python3
"""
ETAPA 1: ESTRUTURA B√ÅSICA
TextBlock, UserMessage, AssistantMessage
"""

# Entender a estrutura b√°sica
from claude_code_sdk import TextBlock, UserMessage, AssistantMessage

print("=" * 60)
print("üìö ETAPA 1: ESTRUTURA B√ÅSICA DO CLAUDE SDK")
print("=" * 60)

# ==========================================
# 1. TextBlock - Bloco de texto simples
# ==========================================
print("\n1Ô∏è‚É£ TextBlock - Bloco de texto simples")
print("-" * 40)

# Criar um TextBlock
text_block = TextBlock(text="Ol√°! Eu sou um bloco de texto simples.")
print(f"‚úÖ Criado: {text_block}")
print(f"üìù Conte√∫do: {text_block.text}")

# M√∫ltiplos TextBlocks
blocos = [
    TextBlock("Primeiro bloco de texto"),
    TextBlock("Segundo bloco de texto"),
    TextBlock("Terceiro bloco de texto")
]
print(f"\nüì¶ Lista com {len(blocos)} TextBlocks criada")
for i, bloco in enumerate(blocos, 1):
    print(f"   Bloco {i}: {bloco.text}")

# ==========================================
# 2. UserMessage - Mensagens do usu√°rio
# ==========================================
print("\n2Ô∏è‚É£ UserMessage - Mensagens do usu√°rio")
print("-" * 40)

# UserMessage com string simples
user_simples = UserMessage(content="Qual √© a capital do Brasil?")
print(f"‚úÖ Mensagem simples: {user_simples.content}")

# UserMessage com lista de TextBlocks
user_complexa = UserMessage(
    content=[
        TextBlock("Eu tenho tr√™s perguntas:"),
        TextBlock("1. O que √© Python?"),
        TextBlock("2. Para que serve?"),
        TextBlock("3. Como come√ßar a aprender?")
    ]
)
print(f"\n‚úÖ Mensagem complexa com {len(user_complexa.content)} blocos")

# ==========================================
# 3. AssistantMessage - Respostas do Claude
# ==========================================
print("\n3Ô∏è‚É£ AssistantMessage - Respostas do Claude")
print("-" * 40)

# AssistantMessage simples
assistant_simples = AssistantMessage(
    content="A capital do Brasil √© Bras√≠lia."
)
print(f"‚úÖ Resposta simples: {assistant_simples.content}")

# AssistantMessage com m√∫ltiplos blocos
assistant_complexa = AssistantMessage(
    content=[
        TextBlock("Python √© uma linguagem de programa√ß√£o:"),
        TextBlock("‚Ä¢ Interpretada e de alto n√≠vel"),
        TextBlock("‚Ä¢ Criada por Guido van Rossum em 1991"),
        TextBlock("‚Ä¢ Usada em web, IA, ci√™ncia de dados, etc"),
        TextBlock("‚Ä¢ Conhecida pela sintaxe clara e leg√≠vel")
    ]
)
print(f"\n‚úÖ Resposta complexa com {len(assistant_complexa.content)} blocos")

# ==========================================
# 4. Exemplo Pr√°tico: Conversa Completa
# ==========================================
print("\n4Ô∏è‚É£ Exemplo Pr√°tico: Conversa Completa")
print("-" * 40)

# Simulando uma conversa
conversa = []

# Pergunta 1
pergunta1 = UserMessage("O que √© uma lista em Python?")
conversa.append(pergunta1)

resposta1 = AssistantMessage(
    content=[
        TextBlock("Uma lista em Python √© uma estrutura de dados que:"),
        TextBlock("‚Ä¢ Armazena m√∫ltiplos valores em sequ√™ncia"),
        TextBlock("‚Ä¢ √â mut√°vel (pode ser modificada)"),
        TextBlock("‚Ä¢ Usa colchetes: [1, 2, 3, 'texto']"),
        TextBlock("‚Ä¢ Permite diferentes tipos de dados")
    ]
)
conversa.append(resposta1)

# Pergunta 2
pergunta2 = UserMessage("Como adicionar itens a uma lista?")
conversa.append(pergunta2)

resposta2 = AssistantMessage(
    content=[
        TextBlock("Voc√™ pode adicionar itens de v√°rias formas:"),
        TextBlock("‚Ä¢ lista.append(item) - adiciona ao final"),
        TextBlock("‚Ä¢ lista.insert(√≠ndice, item) - adiciona em posi√ß√£o espec√≠fica"),
        TextBlock("‚Ä¢ lista.extend([items]) - adiciona m√∫ltiplos itens"),
        TextBlock("‚Ä¢ lista += [item] - concatena√ß√£o")
    ]
)
conversa.append(resposta2)

# Exibindo a conversa
print("\nüí¨ Conversa simulada:")
for i, msg in enumerate(conversa):
    if isinstance(msg, UserMessage):
        print(f"\nüë§ Usu√°rio:")
        if isinstance(msg.content, str):
            print(f"   {msg.content}")
        else:
            for block in msg.content:
                print(f"   ‚Ä¢ {block.text}")
    
    elif isinstance(msg, AssistantMessage):
        print(f"\nü§ñ Claude:")
        if isinstance(msg.content, str):
            print(f"   {msg.content}")
        else:
            for block in msg.content:
                print(f"   {block.text}")

# ==========================================
# 5. Padr√µes de Uso
# ==========================================
print("\n5Ô∏è‚É£ Padr√µes de Uso Comuns")
print("-" * 40)

def processar_mensagem(msg):
    """Fun√ß√£o helper para processar qualquer tipo de mensagem"""
    if isinstance(msg.content, str):
        return msg.content
    elif isinstance(msg.content, list):
        return "\n".join([block.text for block in msg.content])
    return str(msg.content)

# Testando o processador
msg_teste = AssistantMessage(
    content=[
        TextBlock("Linha 1"),
        TextBlock("Linha 2"),
        TextBlock("Linha 3")
    ]
)
print("Mensagem processada:")
print(processar_mensagem(msg_teste))

# ==========================================
# RESUMO
# ==========================================
print("\n" + "=" * 60)
print("üìã RESUMO DA ETAPA 1")
print("=" * 60)
print("""
‚úÖ Aprendemos:
   ‚Ä¢ TextBlock(text="...") - Cria blocos de texto
   ‚Ä¢ UserMessage(content=...) - Representa entrada do usu√°rio
   ‚Ä¢ AssistantMessage(content=...) - Representa resposta do Claude
   ‚Ä¢ content pode ser string ou lista de TextBlocks

üìù Principais pontos:
   ‚Ä¢ TextBlock s√≥ aceita par√¢metro 'text'
   ‚Ä¢ UserMessage e AssistantMessage aceitam string ou lista
   ‚Ä¢ Use isinstance() para verificar tipos
   ‚Ä¢ Processe content diferentemente se for string ou lista

üéØ Pr√≥ximo passo: 
   ‚Ä¢ Etapa 2 - Fun√ß√£o query() para intera√ß√£o real com Claude
""")
print("=" * 60)