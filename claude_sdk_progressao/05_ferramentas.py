#!/usr/bin/env python3
"""
ETAPA 5: FERRAMENTAS (TOOLS)
Read, Write, Bash - Ordem progressiva de aprendizado
"""

import anyio
from claude_code_sdk import (
    query,
    ClaudeCodeOptions,
    AssistantMessage,
    TextBlock
)

print("=" * 60)
print("üîß ETAPA 5: FERRAMENTAS - PODER REAL DO CLAUDE")
print("=" * 60)

# ==========================================
# ORDEM DE APRENDIZADO DAS FERRAMENTAS
# ==========================================
print("\nüìö ORDEM PROGRESSIVA DE APRENDIZADO:")
print("-" * 40)
print("""
1Ô∏è‚É£ Read - Leitura de arquivos (mais seguro)
2Ô∏è‚É£ Write - Escrita de arquivos (modifica sistema)
3Ô∏è‚É£ Bash - Comandos do sistema (mais poderoso)

‚ö†Ô∏è Sempre comece com Read, depois Write, por fim Bash
""")

# ==========================================
# 1. FERRAMENTA READ
# ==========================================
async def ferramenta_read():
    """Come√ßando com Read - apenas leitura"""
    print("\n1Ô∏è‚É£ FERRAMENTA READ - Leitura de Arquivos")
    print("-" * 40)
    
    # Apenas Read permitido
    options = ClaudeCodeOptions(
        system_prompt="You are a file reader assistant. Help analyze files.",
        allowed_tools=["Read"],  # S√≥ pode ler
        max_turns=1
    )
    
    print("üîç Configura√ß√£o:")
    print("   allowed_tools=['Read'] - Apenas leitura")
    print("\nüìñ Exemplo: Lendo pyproject.toml")
    
    async for message in query(
        prompt="Read pyproject.toml and tell me the project name and version",
        options=options
    ):
        if isinstance(message, AssistantMessage):
            for block in message.content:
                if isinstance(block, TextBlock):
                    print(f"   üìÑ {block.text[:200]}...")

# ==========================================
# 2. FERRAMENTA WRITE
# ==========================================
async def ferramenta_write():
    """Adicionando Write - leitura e escrita"""
    print("\n2Ô∏è‚É£ FERRAMENTA WRITE - Escrita de Arquivos")
    print("-" * 40)
    
    # Read + Write
    options = ClaudeCodeOptions(
        system_prompt="You are a Python file creator. Create clean, documented code.",
        allowed_tools=["Read", "Write"],  # Pode ler E escrever
        max_turns=2
    )
    
    print("üìù Configura√ß√£o:")
    print("   allowed_tools=['Read', 'Write'] - Leitura e escrita")
    print("\n‚úçÔ∏è Exemplo: Criando um arquivo Python")
    
    async for message in query(
        prompt="Create a file called greetings.py with a function greet(name) that returns 'Hello, {name}!'",
        options=options
    ):
        if isinstance(message, AssistantMessage):
            print("   ‚úÖ Processando resposta...")
            for block in message.content:
                block_type = type(block).__name__
                if block_type == "TextBlock":
                    print(f"   üí¨ Claude: {block.text[:100]}...")
                else:
                    print(f"   üîß A√ß√£o: {block_type}")

# ==========================================
# 3. FERRAMENTA BASH
# ==========================================
async def ferramenta_bash():
    """Adicionando Bash - controle total"""
    print("\n3Ô∏è‚É£ FERRAMENTA BASH - Comandos do Sistema")
    print("-" * 40)
    
    # Read + Write + Bash (poder total)
    options = ClaudeCodeOptions(
        system_prompt="You are a system administrator. Execute commands safely.",
        allowed_tools=["Read", "Write", "Bash"],  # Todas as ferramentas
        max_turns=3
    )
    
    print("‚ö° Configura√ß√£o:")
    print("   allowed_tools=['Read', 'Write', 'Bash'] - Controle total")
    print("\nüñ•Ô∏è Exemplo: Listando arquivos Python")
    
    async for message in query(
        prompt="List all Python files in the current directory using ls",
        options=options
    ):
        if isinstance(message, AssistantMessage):
            for block in message.content:
                if isinstance(block, TextBlock):
                    print(f"   üóÇÔ∏è {block.text[:150]}...")

# ==========================================
# 4. COMBINA√á√ïES PR√ÅTICAS
# ==========================================
async def combinacoes_praticas():
    """Combina√ß√µes √∫teis de ferramentas"""
    print("\n4Ô∏è‚É£ COMBINA√á√ïES PR√ÅTICAS DE FERRAMENTAS")
    print("-" * 40)
    
    combinacoes = [
        {
            "nome": "Analisador (Read only)",
            "tools": ["Read"],
            "uso": "An√°lise segura de c√≥digo existente"
        },
        {
            "nome": "Editor (Read + Write)",
            "tools": ["Read", "Write"],
            "uso": "Modificar arquivos existentes"
        },
        {
            "nome": "Desenvolvedor (Read + Write + Bash)",
            "tools": ["Read", "Write", "Bash"],
            "uso": "Desenvolvimento completo com testes"
        }
    ]
    
    for combo in combinacoes:
        print(f"\nüéØ {combo['nome']}:")
        print(f"   Ferramentas: {combo['tools']}")
        print(f"   Uso ideal: {combo['uso']}")

# ==========================================
# 5. EXEMPLO PROGRESSIVO COMPLETO
# ==========================================
async def exemplo_progressivo():
    """Evolu√ß√£o gradual do uso de ferramentas"""
    print("\n5Ô∏è‚É£ EXEMPLO PROGRESSIVO - EVOLU√á√ÉO GRADUAL")
    print("-" * 40)
    
    # Passo 1: S√≥ leitura
    print("\nüìñ Passo 1: Apenas Read")
    options1 = ClaudeCodeOptions(
        allowed_tools=["Read"],
        max_turns=1
    )
    
    async for message in query(
        prompt="Check if file example.py exists",
        options=options1
    ):
        if isinstance(message, AssistantMessage):
            print("   ‚úì Verifica√ß√£o conclu√≠da")
            break
    
    # Passo 2: Leitura e escrita
    print("\nüìù Passo 2: Read + Write")
    options2 = ClaudeCodeOptions(
        allowed_tools=["Read", "Write"],
        max_turns=1
    )
    
    async for message in query(
        prompt="Create example.py with a main function",
        options=options2
    ):
        if isinstance(message, AssistantMessage):
            print("   ‚úì Arquivo criado")
            break
    
    # Passo 3: Tudo
    print("\n‚ö° Passo 3: Read + Write + Bash")
    options3 = ClaudeCodeOptions(
        allowed_tools=["Read", "Write", "Bash"],
        max_turns=1
    )
    
    async for message in query(
        prompt="Run python example.py to test it",
        options=options3
    ):
        if isinstance(message, AssistantMessage):
            print("   ‚úì Teste executado")
            break

# ==========================================
# 6. SEGURAN√áA E BOAS PR√ÅTICAS
# ==========================================
print("\n6Ô∏è‚É£ SEGURAN√áA E BOAS PR√ÅTICAS")
print("-" * 40)
print("""
‚ö†Ô∏è IMPORTANTES CONSIDERA√á√ïES:

üîí Seguran√ßa:
   ‚Ä¢ Comece sempre com Read apenas
   ‚Ä¢ Adicione Write quando necess√°rio
   ‚Ä¢ Use Bash com muito cuidado
   
‚úÖ Boas pr√°ticas:
   ‚Ä¢ Read: Para an√°lise e compreens√£o
   ‚Ä¢ Write: Para criar/modificar c√≥digo
   ‚Ä¢ Bash: Para executar e testar
   
üö´ Evite:
   ‚Ä¢ Bash desnecess√°rio para opera√ß√µes simples
   ‚Ä¢ Write sem Read primeiro (pode sobrescrever)
   ‚Ä¢ Comandos Bash destrutivos (rm -rf, etc)
""")

# ==========================================
# FUN√á√ÉO PRINCIPAL
# ==========================================
async def main():
    print("\n" + "üîÑ" * 30)
    print("DEMONSTRANDO FERRAMENTAS")
    print("üîÑ" * 30)
    
    try:
        await ferramenta_read()
        await ferramenta_write()
        await ferramenta_bash()
        await combinacoes_praticas()
        await exemplo_progressivo()
        
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")

# ==========================================
# RESUMO
# ==========================================
print("\n" + "=" * 60)
print("üìã RESUMO DA ETAPA 5 - FERRAMENTAS")
print("=" * 60)
print("""
‚úÖ Ferramentas dispon√≠veis:
   1. Read - Leitura de arquivos
   2. Write - Escrita de arquivos
   3. Bash - Comandos do sistema

üìù Ordem de aprendizado:
   allowed_tools=["Read"]                    # Come√ßar
   allowed_tools=["Read", "Write"]           # Evoluir
   allowed_tools=["Read", "Write", "Bash"]   # Completo

üéØ Casos de uso:
   ‚Ä¢ An√°lise: Read apenas
   ‚Ä¢ Desenvolvimento: Read + Write
   ‚Ä¢ DevOps: Read + Write + Bash

‚ö° Exemplo de uso:
   options = ClaudeCodeOptions(
       allowed_tools=["Read", "Write"],
       system_prompt="You are a Python developer"
   )

üîê Seguran√ßa:
   ‚Ä¢ Sempre validar antes de Write
   ‚Ä¢ Cuidado com comandos Bash
   ‚Ä¢ Princ√≠pio do menor privil√©gio

üîú Pr√≥xima etapa:
   ‚Ä¢ Etapa 6 - Modos de intera√ß√£o
   ‚Ä¢ Etapa 7 - ClaudeSDKClient avan√ßado
""")
print("=" * 60)

# Execu√ß√£o
if __name__ == "__main__":
    print("\nüöÄ Demonstrando ferramentas...")
    try:
        anyio.run(main)
    except ImportError:
        print("‚ùå anyio n√£o instalado")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Interrompido")
    except Exception as e:
        print(f"‚ùå Erro: {e}")