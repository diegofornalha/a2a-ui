[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "a2a-claude-sdk"
version = "1.0.0"
description = "Claude Code SDK integration for A2A UI - Agent-to-Agent Communication Platform"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "A2A Team", email = "dev@a2a.dev"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Communications :: Chat",
    "Typing :: Typed",
]
keywords = [
    "a2a",
    "agent-to-agent",
    "claude-code", 
    "anthropic",
    "claude",
    "multi-agent",
    "mcp",
    "ai-agents",
    "mesop"
]
dependencies = [
    "claude-code-sdk>=0.0.20",
    "typing-extensions>=4.0.0",
    "anyio>=4.0.0",
    "mesop>=0.12.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
]
mcp = [
    "mcp>=0.1.0",
    "jsonrpc>=1.2.0",
]
examples = [
    "ipython>=8.0.0",
    "jupyter>=1.0.0",
    "rich>=13.0.0",
]

[project.urls]
Homepage = "https://github.com/agentflix/a2a-ui"
Documentation = "https://github.com/agentflix/a2a-ui#readme"
Issues = "https://github.com/agentflix/a2a-ui/issues"
Source = "https://github.com/agentflix/a2a-ui"

[tool.hatch.build.targets.wheel]
packages = ["src/a2a_claude_sdk"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
    "/examples",
]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]
asyncio_mode = "auto"
addopts = [
    "--import-mode=importlib",
    "-v",
    "--cov=a2a_claude_sdk",
    "--cov-report=term-missing",
]

# Mypy configuration
[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "claude_code_sdk.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "mesop.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "mcp.*"
ignore_missing_imports = true

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
src = ["src"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "PTH", # flake8-use-pathlib
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501", # line too long (handled by formatter)
]

[tool.ruff.lint.isort]
known-first-party = ["a2a_claude_sdk"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'