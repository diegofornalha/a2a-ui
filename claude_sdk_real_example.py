#!/usr/bin/env python3
"""
Exemplo REAL do Claude Code SDK
Usando as classes TextBlock, UserMessage e AssistantMessage
"""

from claude_code_sdk import TextBlock, UserMessage, AssistantMessage
import json

print("=" * 60)
print("üöÄ CLAUDE CODE SDK - Exemplo Real")
print(f"Vers√£o do SDK: 0.0.20")
print("=" * 60)

# 1. Criando TextBlocks
print("\nüìù 1. TextBlock - Bloco de texto simples")
print("-" * 40)

text_block = TextBlock(
    text="Ol√°! Este √© um bloco de texto do Claude SDK.",
    type="text"
)
print(f"TextBlock criado: {text_block}")
print(f"  - Texto: {text_block.text}")
print(f"  - Tipo: {text_block.type}")

# 2. Criando UserMessage
print("\nüë§ 2. UserMessage - Mensagens do usu√°rio")
print("-" * 40)

# Mensagem simples com string
user_msg_simple = UserMessage(
    content="Qual √© a capital do Brasil?"
)
print(f"UserMessage simples: {user_msg_simple}")

# Mensagem com TextBlock
user_msg_block = UserMessage(
    content=[
        TextBlock(text="Explique o seguinte c√≥digo Python:", type="text"),
        TextBlock(text="def fibonacci(n):\n    if n <= 1: return n\n    return fibonacci(n-1) + fibonacci(n-2)", type="text")
    ]
)
print(f"UserMessage com blocos: {user_msg_block}")

# 3. Criando AssistantMessage
print("\nü§ñ 3. AssistantMessage - Respostas do Claude")
print("-" * 40)

assistant_msg = AssistantMessage(
    content="A capital do Brasil √© Bras√≠lia, localizada no Distrito Federal."
)
print(f"AssistantMessage: {assistant_msg}")

# Resposta complexa com m√∫ltiplos blocos
assistant_complex = AssistantMessage(
    content=[
        TextBlock(text="Este c√≥digo implementa a sequ√™ncia de Fibonacci:", type="text"),
        TextBlock(text="‚Ä¢ Caso base: retorna n se n <= 1", type="text"),
        TextBlock(text="‚Ä¢ Caso recursivo: soma dos dois n√∫meros anteriores", type="text"),
        TextBlock(text="‚Ä¢ Complexidade: O(2^n) - n√£o otimizado", type="text")
    ]
)
print(f"AssistantMessage complexa: {assistant_complex}")

# 4. Simulando uma conversa completa
print("\nüí¨ 4. Conversa Completa")
print("-" * 40)

conversa = []

# Primeira intera√ß√£o
conversa.append(UserMessage("O que √© Python?"))
conversa.append(AssistantMessage(
    "Python √© uma linguagem de programa√ß√£o de alto n√≠vel, interpretada e de prop√≥sito geral. "
    "√â conhecida por sua sintaxe clara e legibilidade."
))

# Segunda intera√ß√£o
conversa.append(UserMessage("Mostre um exemplo de lista"))
conversa.append(AssistantMessage([
    TextBlock("Aqui est√° um exemplo de lista em Python:", type="text"),
    TextBlock("numeros = [1, 2, 3, 4, 5]\nfrutas = ['ma√ß√£', 'banana', 'laranja']", type="text"),
    TextBlock("Voc√™ pode acessar elementos usando √≠ndices: frutas[0] retorna 'ma√ß√£'", type="text")
]))

# Exibindo a conversa
print("\nüìñ Hist√≥rico da Conversa:")
for i, msg in enumerate(conversa, 1):
    if isinstance(msg, UserMessage):
        role = "üë§ Usu√°rio"
        icon = "‚ùì"
    else:
        role = "ü§ñ Claude"
        icon = "üí°"
    
    print(f"\n{icon} Mensagem {i} - {role}:")
    
    # Tratando content como string ou lista
    if isinstance(msg.content, str):
        print(f"   {msg.content}")
    elif isinstance(msg.content, list):
        for block in msg.content:
            if hasattr(block, 'text'):
                print(f"   ‚Ä¢ {block.text}")
            else:
                print(f"   ‚Ä¢ {block}")

# 5. Convertendo para formato de API
print("\nüîÑ 5. Formato para API")
print("-" * 40)

def message_to_dict(msg):
    """Converte mensagem para formato de dicion√°rio"""
    role = "user" if isinstance(msg, UserMessage) else "assistant"
    
    if isinstance(msg.content, str):
        content = msg.content
    elif isinstance(msg.content, list):
        content = "\n".join([
            block.text if hasattr(block, 'text') else str(block) 
            for block in msg.content
        ])
    else:
        content = str(msg.content)
    
    return {
        "role": role,
        "content": content
    }

# Convertendo a conversa
api_format = [message_to_dict(msg) for msg in conversa]
print("Conversa no formato de API:")
print(json.dumps(api_format, indent=2, ensure_ascii=False))

# 6. Funcionalidades avan√ßadas
print("\n‚ö° 6. Funcionalidades Avan√ßadas")
print("-" * 40)

# Criando mensagem com metadados (se suportado)
try:
    # Tentando criar mensagem com contexto adicional
    advanced_msg = UserMessage(
        content=[
            TextBlock("Analise este c√≥digo e sugira melhorias:", type="text"),
            TextBlock("for i in range(len(lista)):\n    print(lista[i])", type="text")
        ]
    )
    print("‚úÖ Mensagem avan√ßada criada com sucesso")
    
    # Resposta detalhada
    response = AssistantMessage([
        TextBlock("Sugest√µes de melhoria:", type="text"),
        TextBlock("1. Use itera√ß√£o direta: for item in lista:", type="text"),
        TextBlock("2. Se precisar do √≠ndice: for i, item in enumerate(lista):", type="text"),
        TextBlock("3. C√≥digo melhorado:\nfor item in lista:\n    print(item)", type="text")
    ])
    print("‚úÖ Resposta com an√°lise de c√≥digo criada")
    
except Exception as e:
    print(f"‚ö†Ô∏è Erro ao criar mensagem avan√ßada: {e}")

print("\n" + "=" * 60)
print("‚úÖ Exemplo completo do Claude Code SDK executado com sucesso!")
print("=" * 60)