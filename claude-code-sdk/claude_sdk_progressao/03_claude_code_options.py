#!/usr/bin/env python3
"""
ETAPA 3: ClaudeCodeOptions
Configura√ß√µes para personalizar o comportamento do Claude
"""

import anyio
from claude_code_sdk import (
    ClaudeCodeOptions,
    query,
    AssistantMessage,
    TextBlock
)

print("=" * 60)
print("‚öôÔ∏è ETAPA 3: ClaudeCodeOptions - PERSONALIZANDO O CLAUDE")
print("=" * 60)

# ==========================================
# 1. Op√ß√µes B√°sicas
# ==========================================
async def opcoes_basicas():
    """Principais op√ß√µes de configura√ß√£o"""
    print("\n1Ô∏è‚É£ Op√ß√µes B√°sicas de Configura√ß√£o")
    print("-" * 40)
    
    # system_prompt - Personalizar comportamento
    options = ClaudeCodeOptions(
        system_prompt="You are a helpful Python teacher. Be concise and use examples.",
        max_turns=1  # Limitar intera√ß√µes
    )
    
    print("üìù Configura√ß√µes:")
    print(f"   ‚Ä¢ system_prompt: Define personalidade/contexto")
    print(f"   ‚Ä¢ max_turns: 1 (limita n√∫mero de intera√ß√µes)")
    
    print("\nü§ñ Resposta com professor de Python:")
    async for message in query(
        prompt="What is a list in Python?",
        options=options
    ):
        if isinstance(message, AssistantMessage):
            for block in message.content:
                if isinstance(block, TextBlock):
                    print(f"   {block.text[:200]}...")  # Limita output

# ==========================================
# 2. Escolhendo Modelo
# ==========================================
async def escolhendo_modelo():
    """Diferentes modelos dispon√≠veis"""
    print("\n2Ô∏è‚É£ Escolhendo o Modelo (model)")
    print("-" * 40)
    
    modelos = ["claude-3-opus", "claude-3-sonnet", "claude-3-haiku"]
    
    print("üìä Modelos dispon√≠veis:")
    for modelo in modelos:
        print(f"   ‚Ä¢ {modelo}")
    
    # Usando modelo espec√≠fico
    options = ClaudeCodeOptions(
        model="claude-3-sonnet",  # Modelo balanceado
        system_prompt="Be extremely concise",
        max_turns=1
    )
    
    print("\nü§ñ Testando com claude-3-sonnet:")
    async for message in query(
        prompt="Define Python in 5 words",
        options=options
    ):
        if isinstance(message, AssistantMessage):
            if isinstance(message.content, str):
                print(f"   {message.content}")
            else:
                for block in message.content:
                    if isinstance(block, TextBlock):
                        print(f"   {block.text}")

# ==========================================
# 3. M√∫ltiplos Turnos
# ==========================================
async def multiplos_turnos():
    """Configurando conversas mais longas"""
    print("\n3Ô∏è‚É£ Configurando M√∫ltiplos Turnos")
    print("-" * 40)
    
    options = ClaudeCodeOptions(
        system_prompt="You are a Python expert. Help step by step.",
        max_turns=3  # Permite 3 intera√ß√µes
    )
    
    print("üìù max_turns=3 permite conversa√ß√£o mais longa")
    print("\nüó£Ô∏è Simulando conversa de 3 turnos:")
    
    prompts = [
        "What is a dictionary in Python?",
        "How do I add items to it?",
        "Can you show an example?"
    ]
    
    for i, prompt in enumerate(prompts, 1):
        print(f"\nTurno {i} - Pergunta: {prompt}")
        print("Resposta: ", end="")
        
        async for message in query(prompt=prompt, options=options):
            if isinstance(message, AssistantMessage):
                # Pega s√≥ a primeira linha para exemplo
                if isinstance(message.content, list) and message.content:
                    first = message.content[0]
                    if isinstance(first, TextBlock):
                        print(first.text[:100] + "...")
                        break

# ==========================================
# 4. System Prompts Especializados
# ==========================================
async def system_prompts_especializados():
    """Diferentes personalidades atrav√©s do system_prompt"""
    print("\n4Ô∏è‚É£ System Prompts Especializados")
    print("-" * 40)
    
    personalidades = [
        {
            "nome": "Professor",
            "prompt": "You are a patient Python teacher. Explain concepts simply with examples.",
            "pergunta": "What is a variable?"
        },
        {
            "nome": "Expert",
            "prompt": "You are a Python expert. Give technical, precise answers.",
            "pergunta": "Explain Python's GIL"
        },
        {
            "nome": "Iniciante-Friendly",
            "prompt": "Explain everything like I'm a complete beginner. Use analogies.",
            "pergunta": "What is a function?"
        }
    ]
    
    for config in personalidades:
        print(f"\nüé≠ Personalidade: {config['nome']}")
        print(f"   Pergunta: {config['pergunta']}")
        
        options = ClaudeCodeOptions(
            system_prompt=config['prompt'],
            max_turns=1
        )
        
        print("   Resposta: ", end="")
        async for message in query(prompt=config['pergunta'], options=options):
            if isinstance(message, AssistantMessage):
                if isinstance(message.content, list) and message.content:
                    first = message.content[0]
                    if isinstance(first, TextBlock):
                        print(first.text[:80] + "...")
                        break

# ==========================================
# 5. Combinando M√∫ltiplas Op√ß√µes
# ==========================================
async def combinando_opcoes():
    """Usando v√°rias op√ß√µes juntas"""
    print("\n5Ô∏è‚É£ Combinando M√∫ltiplas Op√ß√µes")
    print("-" * 40)
    
    # Configura√ß√£o completa
    options = ClaudeCodeOptions(
        system_prompt="You are a Python coding assistant. Be helpful and precise.",
        model="claude-3-sonnet",
        max_turns=2,
        # Podemos adicionar mais op√ß√µes conforme necess√°rio
    )
    
    print("üìù Configura√ß√£o completa:")
    print("   ‚Ä¢ system_prompt: Assistente de c√≥digo Python")
    print("   ‚Ä¢ model: claude-3-sonnet")
    print("   ‚Ä¢ max_turns: 2")
    
    print("\nü§ñ Testando configura√ß√£o completa:")
    async for message in query(
        prompt="Create a simple Python function to calculate factorial",
        options=options
    ):
        if isinstance(message, AssistantMessage):
            print("   Resposta recebida ‚úÖ")
            # Mostra apenas in√≠cio da resposta
            if isinstance(message.content, list) and message.content:
                for block in message.content[:2]:  # Primeiros 2 blocos
                    if isinstance(block, TextBlock):
                        print(f"   {block.text[:100]}...")

# ==========================================
# 6. Preparando para Ferramentas (pr√≥xima etapa)
# ==========================================
async def preparacao_ferramentas():
    """Introdu√ß√£o ao allowed_tools (detalhado na etapa 5)"""
    print("\n6Ô∏è‚É£ Prepara√ß√£o para Ferramentas")
    print("-" * 40)
    
    print("üìù Pr√©via do allowed_tools:")
    print("   ‚Ä¢ Read - Leitura de arquivos")
    print("   ‚Ä¢ Write - Escrita de arquivos")
    print("   ‚Ä¢ Bash - Comandos do sistema")
    
    # Exemplo b√°sico (ser√° expandido na etapa 5)
    options = ClaudeCodeOptions(
        system_prompt="You are a file assistant",
        allowed_tools=["Read"],  # Permite apenas leitura
        max_turns=1
    )
    
    print("\nüîß Com allowed_tools=['Read']:")
    print("   Claude pode ler arquivos mas n√£o modificar")
    
    # Nota: Ferramentas ser√£o exploradas em detalhe na etapa 5

# ==========================================
# FUN√á√ÉO PRINCIPAL
# ==========================================
async def main():
    """Executa todos os exemplos"""
    
    print("\n" + "üîÑ" * 30)
    print("EXECUTANDO EXEMPLOS DE ClaudeCodeOptions")
    print("üîÑ" * 30)
    
    try:
        await opcoes_basicas()
        await escolhendo_modelo()
        await multiplos_turnos()
        await system_prompts_especializados()
        await combinando_opcoes()
        await preparacao_ferramentas()
        
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")

# ==========================================
# RESUMO E REFER√äNCIA R√ÅPIDA
# ==========================================
print("\n" + "=" * 60)
print("üìã RESUMO DA ETAPA 3 - ClaudeCodeOptions")
print("=" * 60)
print("""
‚úÖ Principais Op√ß√µes:
   ‚Ä¢ system_prompt - Define personalidade/contexto
   ‚Ä¢ max_turns - Limita n√∫mero de intera√ß√µes
   ‚Ä¢ model - Escolhe modelo (opus, sonnet, haiku)
   ‚Ä¢ allowed_tools - Habilita ferramentas (pr√≥xima etapa)

üìù Exemplo b√°sico:
   options = ClaudeCodeOptions(
       system_prompt="You are a helpful assistant",
       max_turns=1,
       model="claude-3-sonnet"
   )

üéØ Casos de uso:
   ‚Ä¢ Professor: system_prompt educacional
   ‚Ä¢ Expert: system_prompt t√©cnico
   ‚Ä¢ Assistente: system_prompt helpful
   ‚Ä¢ Limitado: max_turns=1 para respostas √∫nicas

üí° Dicas:
   ‚Ä¢ system_prompt √© a op√ß√£o mais poderosa
   ‚Ä¢ max_turns controla dura√ß√£o da conversa
   ‚Ä¢ model afeta velocidade e qualidade
   ‚Ä¢ Combine op√ß√µes para casos espec√≠ficos

üîú Pr√≥xima etapa:
   ‚Ä¢ Etapa 4 - Tipos de blocos avan√ßados
   ‚Ä¢ Etapa 5 - Ferramentas (Read, Write, Bash)
""")
print("=" * 60)

# Execu√ß√£o
if __name__ == "__main__":
    print("\nüöÄ Iniciando exemplos de ClaudeCodeOptions...")
    try:
        anyio.run(main)
    except ImportError:
        print("‚ùå anyio n√£o instalado. Instale com: pip install anyio")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Interrompido pelo usu√°rio")
    except Exception as e:
        print(f"‚ùå Erro: {e}")