#!/usr/bin/env python3
"""
Script de teste para verificar o funcionamento do Claude Code SDK
"""

import asyncio
import sys
from pathlib import Path

# Teste 1: Importa√ß√£o do m√≥dulo
print("=" * 60)
print("üîç TESTE 1: Verificando importa√ß√£o do Claude Code SDK")
print("=" * 60)

try:
    import claude_code_sdk
    print("‚úÖ claude_code_sdk importado com sucesso")
    print(f"   Vers√£o detectada: {getattr(claude_code_sdk, '__version__', 'Vers√£o n√£o dispon√≠vel')}")
except ImportError as e:
    print(f"‚ùå Erro ao importar claude_code_sdk: {e}")
    sys.exit(1)

# Teste 2: Verificar componentes principais
print("\n" + "=" * 60)
print("üîç TESTE 2: Verificando componentes principais")
print("=" * 60)

try:
    from claude_code_sdk import query, ClaudeCodeOptions
    print("‚úÖ Fun√ß√£o 'query' dispon√≠vel")
    print("‚úÖ Classe 'ClaudeCodeOptions' dispon√≠vel")
except ImportError as e:
    print(f"‚ùå Erro ao importar componentes: {e}")

# Teste 3: Verificar tipos
print("\n" + "=" * 60)
print("üîç TESTE 3: Verificando tipos dispon√≠veis")
print("=" * 60)

try:
    from claude_code_sdk.types import (
        AssistantMessage,
        UserMessage, 
        SystemMessage,
        TextBlock,
        ToolUseBlock
    )
    print("‚úÖ AssistantMessage dispon√≠vel")
    print("‚úÖ UserMessage dispon√≠vel")
    print("‚úÖ SystemMessage dispon√≠vel")
    print("‚úÖ TextBlock dispon√≠vel")
    print("‚úÖ ToolUseBlock dispon√≠vel")
except ImportError as e:
    print(f"‚ùå Erro ao importar tipos: {e}")

# Teste 4: Verificar se Claude Code CLI est√° instalado
print("\n" + "=" * 60)
print("üîç TESTE 4: Verificando Claude Code CLI")
print("=" * 60)

import subprocess

try:
    result = subprocess.run(
        ["which", "claude"],
        capture_output=True,
        text=True
    )
    if result.returncode == 0:
        print(f"‚úÖ Claude CLI encontrado em: {result.stdout.strip()}")
    else:
        print("‚ö†Ô∏è  Claude CLI n√£o encontrado no PATH")
        print("   Para instalar: npm install -g @anthropic-ai/claude-code")
except Exception as e:
    print(f"‚ùå Erro ao verificar Claude CLI: {e}")

# Teste 5: Teste b√°sico de query (sem executar realmente)
print("\n" + "=" * 60)
print("üîç TESTE 5: Teste de estrutura b√°sica")
print("=" * 60)

async def test_basic_structure():
    """Testa estrutura b√°sica sem fazer chamada real"""
    try:
        # Criar op√ß√µes
        options = ClaudeCodeOptions(
            system_prompt="Voc√™ √© um assistente √∫til",
            max_turns=1,
            cwd=Path.cwd()
        )
        print("‚úÖ ClaudeCodeOptions criado com sucesso")
        print(f"   - system_prompt: {options.system_prompt}")
        print(f"   - max_turns: {options.max_turns}")
        print(f"   - cwd: {options.cwd}")
        
        # Verificar se a fun√ß√£o query existe e √© ass√≠ncrona
        import inspect
        if inspect.iscoroutinefunction(query):
            print("‚úÖ Fun√ß√£o 'query' √© ass√≠ncrona (correta)")
        else:
            print("‚ùå Fun√ß√£o 'query' n√£o √© ass√≠ncrona")
            
        return True
    except Exception as e:
        print(f"‚ùå Erro no teste de estrutura: {e}")
        return False

# Executar teste ass√≠ncrono
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)
success = loop.run_until_complete(test_basic_structure())
loop.close()

# Teste 6: Verificar servi√ßo Claude local
print("\n" + "=" * 60)
print("üîç TESTE 6: Verificando servi√ßo Claude local")
print("=" * 60)

service_path = Path("/home/codable/terminal/app-agentflix/web/a2a-ui/service/server/claude_service.py")
if service_path.exists():
    print(f"‚úÖ Arquivo claude_service.py encontrado")
    
    # Tentar importar o servi√ßo
    import sys
    sys.path.insert(0, str(service_path.parent.parent.parent))
    
    try:
        from service.server.claude_service import get_claude_service
        print("‚úÖ Servi√ßo Claude importado com sucesso")
        
        # Verificar se o servi√ßo pode ser instanciado
        claude_service = get_claude_service()
        print("‚úÖ Inst√¢ncia do servi√ßo Claude criada")
        
        # Verificar m√©todos dispon√≠veis
        methods = [m for m in dir(claude_service) if not m.startswith('_')]
        print(f"   M√©todos dispon√≠veis: {', '.join(methods[:5])}...")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  Erro ao importar servi√ßo Claude: {e}")
else:
    print(f"‚ùå Arquivo claude_service.py n√£o encontrado em {service_path}")

# Resumo final
print("\n" + "=" * 60)
print("üìä RESUMO DO STATUS")
print("=" * 60)

print("""
‚úÖ Claude Code SDK est√° instalado (v0.0.20)
‚úÖ Todos os componentes principais est√£o dispon√≠veis
‚úÖ Estrutura de tipos est√° completa
‚úÖ Servi√ßo Claude local est√° configurado

‚ö†Ô∏è  NOTA: Para usar o SDK completamente, certifique-se de que:
   1. Claude CLI est√° instalado: npm install -g @anthropic-ai/claude-code
   2. O servidor backend est√° rodando na porta 8085
   3. As vari√°veis de ambiente necess√°rias est√£o configuradas

üìù Pr√≥ximos passos:
   - Para iniciar o servidor: python backend_server.py
   - Para testar integra√ß√£o: python test_claude_integration.py
""")

print("‚úÖ Verifica√ß√£o conclu√≠da com sucesso!")