#!/usr/bin/env python3
"""
Exemplo COMPLETO do Claude Code SDK
Demonstrando TextBlock, UserMessage, AssistantMessage e query
"""

import anyio
from claude_code_sdk import (
    TextBlock,
    UserMessage, 
    AssistantMessage,
    ClaudeCodeOptions,
    ResultMessage,
    query
)

print("=" * 60)
print("üöÄ CLAUDE CODE SDK - Guia Completo")
print("=" * 60)

# ==========================================
# PARTE 1: Estruturas B√°sicas
# ==========================================
print("\nüìö PARTE 1: Estruturas B√°sicas")
print("-" * 40)

# 1.1 TextBlock - Bloco de texto simples
print("\n1.1 TextBlock:")
text_block = TextBlock(text="Este √© um bloco de texto do Claude SDK")
print(f"   ‚úÖ Criado: {text_block}")
print(f"   üìù Conte√∫do: {text_block.text}")

# 1.2 UserMessage - Mensagens do usu√°rio
print("\n1.2 UserMessage:")
user_msg = UserMessage(content="Qual a diferen√ßa entre lista e tupla em Python?")
print(f"   ‚úÖ Mensagem do usu√°rio criada")
print(f"   üìù Conte√∫do: {user_msg.content}")

# UserMessage com m√∫ltiplos blocos
user_msg_blocks = UserMessage(
    content=[
        TextBlock("Tenho duas perguntas sobre Python:"),
        TextBlock("1. Como criar uma fun√ß√£o?"),
        TextBlock("2. O que s√£o decoradores?")
    ]
)
print(f"   ‚úÖ Mensagem com {len(user_msg_blocks.content)} blocos criada")

# 1.3 AssistantMessage - Respostas do Claude
print("\n1.3 AssistantMessage:")
assistant_msg = AssistantMessage(
    content="Listas s√£o mut√°veis, tuplas s√£o imut√°veis em Python."
)
print(f"   ‚úÖ Resposta do assistente criada")
print(f"   üìù Conte√∫do: {assistant_msg.content}")

# ==========================================
# PARTE 2: Usando a fun√ß√£o query (ass√≠ncrona)
# ==========================================
print("\nüì° PARTE 2: Fun√ß√£o query() - Intera√ß√£o com Claude")
print("-" * 40)

async def exemplo_basico():
    """Exemplo b√°sico de query"""
    print("\n2.1 Query B√°sica:")
    print("   Pergunta: O que √© Python?")
    print("   Resposta do Claude:")
    
    async for message in query(prompt="O que √© Python em uma frase?"):
        if isinstance(message, AssistantMessage):
            for block in message.content:
                if isinstance(block, TextBlock):
                    print(f"   ü§ñ {block.text}")

async def exemplo_com_opcoes():
    """Query com op√ß√µes personalizadas"""
    print("\n2.2 Query com Op√ß√µes Personalizadas:")
    
    options = ClaudeCodeOptions(
        system_prompt="Voc√™ √© um professor de programa√ß√£o Python. Seja did√°tico e use exemplos.",
        max_turns=1
    )
    
    print("   Pergunta: Como criar uma lista em Python?")
    print("   Resposta do Claude (modo professor):")
    
    async for message in query(
        prompt="Como criar uma lista em Python? D√™ exemplos simples.",
        options=options
    ):
        if isinstance(message, AssistantMessage):
            for block in message.content:
                if isinstance(block, TextBlock):
                    print(f"   üìö {block.text}")

async def exemplo_com_ferramentas():
    """Query usando ferramentas (Read, Write, etc)"""
    print("\n2.3 Query com Ferramentas:")
    
    options = ClaudeCodeOptions(
        allowed_tools=["Read", "Write"],
        system_prompt="Voc√™ √© um assistente de c√≥digo Python.",
        max_turns=2
    )
    
    print("   Tarefa: Criar arquivo exemplo_python.py com fun√ß√£o de sauda√ß√£o")
    print("   Executando...")
    
    async for message in query(
        prompt="Crie um arquivo exemplo_python.py com uma fun√ß√£o saudar(nome) que retorna 'Ol√°, {nome}!'",
        options=options
    ):
        if isinstance(message, AssistantMessage):
            for block in message.content:
                if isinstance(block, TextBlock):
                    print(f"   ‚úçÔ∏è {block.text}")
        elif isinstance(message, ResultMessage):
            if message.total_cost_usd > 0:
                print(f"   üí∞ Custo: ${message.total_cost_usd:.6f}")

async def exemplo_conversacao():
    """Exemplo de conversa√ß√£o mais complexa"""
    print("\n2.4 Conversa√ß√£o Complexa:")
    
    options = ClaudeCodeOptions(
        system_prompt="Voc√™ √© um expert em Python. Seja conciso mas completo.",
        max_turns=3
    )
    
    perguntas = [
        "O que s√£o list comprehensions?",
        "Mostre um exemplo pr√°tico",
        "Quando devo usar e quando evitar?"
    ]
    
    for pergunta in perguntas:
        print(f"\n   üë§ Pergunta: {pergunta}")
        
        async for message in query(prompt=pergunta, options=options):
            if isinstance(message, AssistantMessage):
                for block in message.content:
                    if isinstance(block, TextBlock):
                        # Limita a exibi√ß√£o para n√£o ficar muito longo
                        texto = block.text[:200] + "..." if len(block.text) > 200 else block.text
                        print(f"   ü§ñ {texto}")

# ==========================================
# PARTE 3: Exemplos Pr√°ticos
# ==========================================
print("\nüéØ PARTE 3: Exemplos Pr√°ticos")
print("-" * 40)

def criar_conversa_estruturada():
    """Cria uma conversa estruturada sem usar query"""
    print("\n3.1 Conversa Estruturada (sem API):")
    
    conversa = []
    
    # Adiciona pergunta
    pergunta = UserMessage("Como fazer debug em Python?")
    conversa.append(pergunta)
    print(f"   üë§ User: {pergunta.content}")
    
    # Simula resposta
    resposta = AssistantMessage(content=[
        TextBlock("Existem v√°rias formas de fazer debug em Python:"),
        TextBlock("1. print() - M√©todo mais simples"),
        TextBlock("2. pdb - Python Debugger integrado"),
        TextBlock("3. breakpoint() - Python 3.7+"),
        TextBlock("4. IDEs com debug visual (PyCharm, VS Code)")
    ])
    conversa.append(resposta)
    
    print("   ü§ñ Assistant:")
    for block in resposta.content:
        print(f"      ‚Ä¢ {block.text}")
    
    return conversa

def exemplo_processamento_mensagens():
    """Mostra como processar diferentes tipos de mensagens"""
    print("\n3.2 Processamento de Mensagens:")
    
    # Diferentes tipos de conte√∫do
    msg_string = AssistantMessage(content="Resposta simples como string")
    msg_blocks = AssistantMessage(content=[
        TextBlock("Resposta"),
        TextBlock("com m√∫ltiplos"),
        TextBlock("blocos de texto")
    ])
    
    def processar_mensagem(msg):
        """Processa qualquer tipo de mensagem"""
        if isinstance(msg.content, str):
            return msg.content
        elif isinstance(msg.content, list):
            return " ".join([
                block.text if isinstance(block, TextBlock) else str(block)
                for block in msg.content
            ])
        return str(msg.content)
    
    print(f"   String: {processar_mensagem(msg_string)}")
    print(f"   Blocos: {processar_mensagem(msg_blocks)}")

# ==========================================
# PARTE 4: Dicas e Boas Pr√°ticas
# ==========================================
print("\nüí° PARTE 4: Dicas e Boas Pr√°ticas")
print("-" * 40)

print("""
4.1 Estrutura do SDK:
   ‚Ä¢ TextBlock: Apenas aceita 'text' como par√¢metro
   ‚Ä¢ UserMessage/AssistantMessage: Aceita string ou lista de TextBlocks
   ‚Ä¢ query(): Fun√ß√£o ass√≠ncrona para interagir com Claude
   ‚Ä¢ ClaudeCodeOptions: Configura comportamento da query

4.2 Quando usar cada componente:
   ‚Ä¢ TextBlock: Para estruturar texto em blocos
   ‚Ä¢ UserMessage: Para representar entrada do usu√°rio
   ‚Ä¢ AssistantMessage: Para representar resposta do Claude
   ‚Ä¢ query(): Para fazer chamadas reais √† API

4.3 Op√ß√µes importantes do ClaudeCodeOptions:
   ‚Ä¢ system_prompt: Define personalidade/contexto
   ‚Ä¢ max_turns: Limita n√∫mero de intera√ß√µes
   ‚Ä¢ allowed_tools: Habilita ferramentas (Read, Write, etc)
   ‚Ä¢ model: Escolhe o modelo (opus, sonnet, haiku)

4.4 Tratamento de respostas:
   ‚Ä¢ Sempre verificar tipo com isinstance()
   ‚Ä¢ AssistantMessage cont√©m a resposta
   ‚Ä¢ ResultMessage cont√©m metadados (custo, tokens, etc)
   ‚Ä¢ Iterar sobre content quando for lista de blocos
""")

# ==========================================
# EXECU√á√ÉO PRINCIPAL
# ==========================================
async def main():
    """Executa exemplos ass√≠ncronos"""
    print("\n" + "=" * 60)
    print("üöÄ EXECUTANDO EXEMPLOS ASS√çNCRONOS")
    print("=" * 60)
    
    try:
        # Tenta executar queries reais
        await exemplo_basico()
        await exemplo_com_opcoes()
        # await exemplo_com_ferramentas()  # Comentado pois cria arquivos
        # await exemplo_conversacao()  # Comentado para economizar tokens
    except Exception as e:
        print(f"\n‚ö†Ô∏è Erro ao executar queries: {e}")
        print("   Certifique-se de que o Claude Code est√° configurado corretamente")

# Executa partes s√≠ncronas
print("\n" + "=" * 60)
print("üîß EXECUTANDO EXEMPLOS S√çNCRONOS")
print("=" * 60)

conversa = criar_conversa_estruturada()
exemplo_processamento_mensagens()

print("\n" + "=" * 60)
print("‚úÖ Exemplo completo do Claude Code SDK executado!")
print("   Para executar queries ass√≠ncronas, use:")
print("   python3 -m anyio claude_sdk_completo.py")
print("=" * 60)

# Para executar as partes ass√≠ncronas
if __name__ == "__main__":
    print("\nüîÑ Tentando executar partes ass√≠ncronas...")
    try:
        anyio.run(main)
    except ImportError:
        print("   ‚ö†Ô∏è anyio n√£o instalado. Instale com: pip install anyio")
    except Exception as e:
        print(f"   ‚ö†Ô∏è Erro: {e}")